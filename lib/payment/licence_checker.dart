// lib/payment/licence_checker.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

/// ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏: LicenceChecker
///  ‡¶ï‡¶æ‡¶ú: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶ì UI ‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶Ø‡¶º
class LicenceChecker {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();

  /// ‡¶Æ‡ßá‡¶•‡¶°: checkLicenceStatus
  /// ‡¶ï‡¶æ‡¶ú: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ Firestore ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá
  /// ‡¶è‡¶¨‡¶Ç SecureStorage-‡¶è ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá, ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ï‡¶ø‡¶®‡¶æ
  Future<bool> checkLicenceStatus(String userEmail) async {
    try {
      final docSnapshot =
          await _firestore.collection('licenses').doc(userEmail).get();

      if (docSnapshot.exists) {
        final data = docSnapshot.data();
        final bool isPremium = data?['isPremium'] ?? false;
        final String expiry = data?['expiryDate'] ?? '';

        // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶ø Secure Storage-‡¶è Cache ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ
        await _secureStorage.write(key: 'isPremium', value: isPremium.toString());
        await _secureStorage.write(key: 'expiryDate', value: expiry);

        return isPremium;
      } else {
        return false;
      }
    } catch (e) {
      print("Licence Checking Error: $e");
      return false;
    }
  }

  /// ‡¶Æ‡ßá‡¶•‡¶°: getCachedLicenceStatus
  /// ‡¶ï‡¶æ‡¶ú: ‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßá‡¶∑ ‡¶ú‡¶æ‡¶®‡¶æ ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
  Future<bool> getCachedLicenceStatus() async {
    final value = await _secureStorage.read(key: 'isPremium');
    return value == 'true';
  }

  /// üßπ ‡¶Æ‡ßá‡¶•‡¶°: clearLicenceCache
  /// ‡¶ï‡¶æ‡¶ú: Secure Storage ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶¶‡ßá‡¶Ø‡¶º
  Future<void> clearLicenceCache() async {
    await _secureStorage.delete(key: 'isPremium');
    await _secureStorage.delete(key: 'expiryDate');
  }
}

// Inside LicenceChecker class

static Future<bool> validate(String licenseKey) async {
  // ‡¶è‡¶á ‡¶Æ‡ßá‡¶•‡¶°‡¶ü‡¶ø dummy ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá
  // ‡¶™‡¶∞‡ßá Firestore ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶§‡ßç‡¶∞ ‡¶•‡ßá‡¶ï‡ßá license key verify ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
  return licenseKey == 'VALID_LIFETIME_KEY'; // Temporary validation logic
}