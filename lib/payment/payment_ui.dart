// lib/payment/payment_ui.dart

import 'package:flutter/material.dart';
import '../services/subscription_service.dart'; // тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕рж╛рж░рзНржнрж┐рж╕
import '../widgets/custom_button.dart'; // тЬЕ ржХрж╛рж╕рзНржЯржо ржмрж╛ржЯржи UI

/// ЁЯУ▒ UI Widget: ржЗржЙржЬрж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНржпрж╛ржХрзЗржЬ ржмрзЗржЫрзЗ ржирж┐рзЯрзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗ
class PaymentUI extends StatefulWidget {
  const PaymentUI({Key? key}) : super(key: key);

  @override
  State<PaymentUI> createState() => _PaymentUIState();
}

class _PaymentUIState extends State<PaymentUI> {
  String _selectedPlan = 'monthly';
  bool _isProcessing = false;

  // ЁЯФЦ ржкрзНрж░рж╛ржЗрж╕ ржорзНржпрж╛ржк (Future: Firebase ржерзЗржХрзЗ dynamic ржЖржирж╛ ржпрж╛ржмрзЗ)
  final Map<String, String> planPrices = {
    'monthly': 'тВ╣99 / ржорж╛рж╕',
    'yearly': 'тВ╣999 / ржмржЫрж░',
    'lifetime': 'тВ╣1999 ржПржХржХрж╛рж▓рзАржи',
  };

  /// ЁЯЪА рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╢рзБрж░рзБ ржХрж░рзЗ
  void _subscribe() async {
    setState(() => _isProcessing = true);

    bool result = await SubscriptionService.subscribeToPlan(_selectedPlan);

    setState(() => _isProcessing = false);

    if (result) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗ')),
      );
      Navigator.pop(context); // рж╕ржлрж▓ рж╣рж▓рзЗ UI ржерзЗржХрзЗ ржмрзЗрж░рж┐рзЯрзЗ ржпрж╛ржи
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ')),
      );
    }
  }

  /// ЁЯз▒ ржорзЗржЗржи ржмрж┐рж▓рзНржб UI
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржкрзНржпрж╛ржХрзЗржЬ'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text(
              'ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНрж▓рзНржпрж╛ржи ржмрзЗржЫрзЗ ржирж┐ржи',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 20),

            // тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНрж▓рзНржпрж╛ржи рж░рзЗржбрж┐ржУ ржмрж╛ржЯржи
            ...planPrices.entries.map((entry) {
              return RadioListTile(
                title: Text(entry.value),
                value: entry.key,
                groupValue: _selectedPlan,
                onChanged: (value) {
                  setState(() => _selectedPlan = value.toString());
                },
              );
            }).toList(),

            const Spacer(),

            // тЬЕ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ indicator ржмрж╛ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржмрж╛ржЯржи
            if (_isProcessing)
              CircularProgressIndicator()
            else
              CustomButton(
                text: 'рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзБржи',
                onPressed: _subscribe,
              ),

            const SizedBox(height: 12),

            Text(
              'ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржЖржкржирж╛рж░ ржкрзНрж▓рзНржпрж╛ржи ржЖржкржЧрзНрж░рзЗржб/ржбрж╛ржЙржиржЧрзНрж░рзЗржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред',
              style: TextStyle(color: Colors.grey[600], fontSize: 12),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}